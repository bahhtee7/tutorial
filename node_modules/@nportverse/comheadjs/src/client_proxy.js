'use strict';

const conn_t = require('./conn');

const {
	challenge,
	challenge_verify,
} = require('./handshake');
const packet_t = require('./packet');

class client_proxy_t extends conn_t {
	//constructor(sock, methods)
	constructor(sock, xor)
	{
		super(sock, xor);

//		if (Number.isInteger(xor)) {
//			this.xor = xor;
//		}
//		else {
//			this.xor = Number(aes_dec(xor, 'funnyfig')); 
//		}

		//this.methods = methods;

		//this.reqs = new Map();

		this.req_event = 'chal_resp';

		this.on('close', () => {
			this.emit('unavailable', this);
		});

		this.on('error', () => {
			this.emit('unavailable', this);
		});
		

		this.on('end', () => {
			this.emit('unavailable', this);
		});

		this.on('_req', packet => {
			this._proc_request(packet);
		});

		const chal = challenge();
	
		this.on('chal_resp', packet => {
			this._auth(packet, chal);
		});
		
		this.send(190, '', chal);
		
		console.log('challenge sent');
	}

	async send(tr_code, req_id, payload, header)
	{
		//console.log('send:', tr_code, req_id, payload);
		return super.send(tr_code, req_id, payload, header);
	}

	_auth(packet, chal)
	{
		//if (packet.tr_code !== 191) {
		if (packet.tr_code !== 190) {
			console.log('Unexpected tr_code');
			return this.send(196, '', Buffer.alloc(0)).finally(() => {
				this.sock.destroy();
			});
		}

		if (!challenge_verify(chal, this.xor, packet.payload)) {
			console.log('Invalid challenge response');
			return this.send(196, '', Buffer.alloc(0)).finally(() => {
				this.sock.destroy();
			});
		}

		this.send(191, '', Buffer.alloc(0));

		this.req_event = '_req';

		console.log('challenge verified');
	}

	_proc_request(packet)
	{
		try {
			const payload = JSON.parse(packet.payload.toString());
			this.emit('req', this, packet, payload);
		}
		catch (e) {
			// 0, 1, 10: success
			// Invalid request format
			this.send(packet.tr_code, packet.req_id, 1001, packet.header);
		}
	}

//	_proc_request(packet)
//	{
//		try {
//			//const callid = nanoid(8);
//			const payload = JSON.parse(packet.payload.toString());
//
//			// XXX
//			//this.methods[packet.tr_code](payload, (e, resp) => {
//			this.methods(payload, (resp) => {
//
//				// disconnected
//				// dump log here
//				if (this.sock.destroyed) {
//					console.warn(`Dangling transaction: ${packet.tr_code}(${packet.req_id})`);
//					console.warn(`request: ${payload}`);
//					console.warn(`response: ${resp}`);
//					return;
//				}
//
//				//console.dir(packet);
//
//				// XXX possible to be failed
//
//				(async () => {
//					try {
//						await this.send(packet.tr_code, packet.req_id, resp);
//					}
//					catch (e) {
//						// dump log here
//					}
//				})();
//			});
//		}
//		catch (e) {
//			// 0, 1, 10: success
//			// Invalid request format
//			this.send(packet.tr_code, packet.req_id, 1001);
//		}
//	}

	_proc_idata()
	{
		const pkt = packet_t.depktize(this.ibuf);
		if (!pkt) return false;

		this.emit(this.req_event, pkt);

		this.ibuf = Buffer.from(this.ibuf.slice(pkt.size()));

		return true;
	}

}

module.exports = client_proxy_t;

