'use strict';

const crypto = require('crypto');
const md4 = require('js-md4');
const dump = require('buffer-hexdump');

//const XOR = 2929;
//const XOR = 4985;
// test 50
//const XOR = 6291;
// real
//const XOR = 7249;

function challenge()
{
	return crypto.randomBytes(4);
}

//function challenge_verify(challenge, resp)
//{
//	return Buffer.compare(challenge_response(challenge), resp) === 0;
//}

//function challenge_verify(challenge, resp)
//{
//	const calc = challenge_response(challenge);
//	console.log('calc');
//	console.log(dump(calc));
//	console.log('resp');
//	console.log(dump(resp));
//	return Buffer.compare(calc, resp) === 0;
//}

function challenge_verify(challenge, xor, resp)
{
	const calc = challenge_response(challenge, xor);
	if (resp.length < calc.length) {
		return false;
	}
	resp = resp.slice(0, calc.length);
	return Buffer.compare(calc, resp) === 0;
}

//function challenge_response(challenge)
//{
//	let rand = challenge.readUInt32LE();
//
//	rand = -(rand & 0x80000000) | (rand & 0x7FFFFFFF);
//
//	const resp = Buffer.alloc(4);
//	//const resp = Buffer.from(rand ^ XOR);
//	rand ^= XOR;
//	rand = -(rand & 0x80000000) | (rand & 0x7FFFFFFF);
//	resp.writeUInt32LE(rand);
//
//	const hash = crypto.createHash('md4');
//	return hash.update(resp).digest();
//}

function challenge_response(challenge, xor)
{
	let rand = challenge.readUInt32LE();
	//let rand = challenge.readUInt32BE();

//	console.log('rand1', rand);
//	rand = -(rand & 0x80000000) | (rand & 0x7FFFFFFF);
//	console.log('rand2', rand);

	//const resp = Buffer.alloc(4);
	//const resp = Buffer.from(rand ^ XOR);
	//rand ^= XOR;
	rand ^= xor;
	rand = -(rand & 0x80000000) | (rand & 0x7FFFFFFF);
	//console.log('resp', rand);
	//resp.writeUInt32LE(rand);
	const resp = Buffer.from(rand.toString());
	return Buffer.from(md4.update(resp).digest());
}


module.exports = {
	challenge,
	challenge_verify,
	challenge_response
};

//if (require.main === module) {
//	const {execSync} = require('child_process');
//
////	exec('php ../tcpclient/src/legacy/LegacyHandShakeUtil.php', (e, stdout, stderr) => {
////		//console.log(Buffer.from(stdout).toString('hex'));
////		console.log(typeof(stdout));
////		const i = Buffer.from(stdout);
////		console.log(i);
////		//console.log(Buffer.from(stdout).toString());
////	});
//
////	exec('php -v', (e, stdout, stderr) => {
////		console.log(stdout);
////	});
//
//	const chal = challenge();
//	console.log(chal);
//	const resp = execSync('php ../tcpclient/src/legacy/LegacyHandShakeUtil.php', {input: chal});
//	console.log(resp);
//	console.log(challenge_verify(chal, resp));
//}


if (require.main === module) {
	//const chal = Buffer.from('fb35495f', 'hex');
	const chal = Buffer.from('2982fd06', 'hex');
	console.log(chal);
	const cresp = challenge_response(chal, 1111);
	console.log(cresp);
}
