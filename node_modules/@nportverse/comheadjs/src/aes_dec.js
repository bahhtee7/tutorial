'use strict';

const crypto = require('crypto');

// openssl aes-256-cbc -a -e -k <PASSPHRASE> -pbkdf2 -p
function dec(message, secret)
{
	//console.log('message', message);

	const cypher = Buffer.from(message, "base64");
	// eat up 'Salted__'
	const salt = cypher.slice(8, 16);

	// iteration "10000", hash algorithm "sha256" by default
	// you can change the values with -iter and -md options
	// rv: key(aes256 key length 32-Byte) + iv(aes256 iv length 16-Byte)
	const key_iv = crypto.pbkdf2Sync(secret, salt, 10000, 32+16, 'sha256');

	const key = key_iv.slice(0,32);
	const iv = key_iv.slice(32);

	const contents = cypher.slice(16);
	const decipher = crypto.createDecipheriv("aes-256-cbc", key, iv);

	return decipher.update(contents) + decipher.final();
}

module.exports = dec;

if (require.main === module) {
	const buf = [];
	process.stdin.on('data', data => {
		buf.push(data);
	});
	process.stdin.on('end', () => {
		const cyphertext = buf.join('');
		const plaintext = dec(cyphertext, '<PASSPHRASE>');
		console.log(plaintext);
	});
}
