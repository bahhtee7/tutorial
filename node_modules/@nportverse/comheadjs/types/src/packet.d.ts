export = packet_t;
declare class packet_t {
    static depktize(buf: Buffer): false | packet_t;
    static pktize(tr_code: number|string, req_id: string, payloadOrError: Buffer|object|number, header?: Buffer|(p:packet_t)=>void): packet_t;
    protected static pktize_normal(tr_code: number, req_id: string, payload: Buffer, header?: Buffer|(p:packet_t)=>void, client_ip?:string): packet_t;
    protected static pktize_error(tr_code: number, req_id: string, err_code: number, header?: Buffer|(p:packet_t)=>void): packet_t;
    constructor(buf: Buffer|number);
    protected buf: Buffer;
    size(): number;
    parse(): void;
    protected update_header(header?: Buffer|(p:packet_t)=>void): void;
    readonly tr_code: number;
    readonly err_code: number;
    readonly sym_code: number;
    readonly req_id: string;
    readonly payload: Buffer;
    readonly header: Buffer;
}
declare namespace packet_t {
    const PKTLEN_I: number;
    const VER_I: number;
    const CTYPE_I: number;
    const TRCODE_I: number;
    const ERROR_I: number;
    const PAYLEN_I: number;
    const SYM_CODE_I: number;
    const REQID_I: number;
    const CIP_I: number;
    const PAYLOAD_I: number;
    const HEADER_SZ: number;
    const REQID_SZ: number;
    const CIP_SZ: number;
    const TAIL_SZ: number;
    const TAIL: string;
}
//# sourceMappingURL=packet.d.ts.map
